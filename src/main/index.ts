/**
 * Main process entry point
 */

import { app, BrowserWindow, ipcMain, screen } from 'electron';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { isDev } from './utils/env';
import { createMainWindow } from './window/main-window';
import { initializeDatabase } from './database/init';
import { setupIpcHandlers } from './ipc/handlers';
import { setupSystemIntegration } from './system/integration';

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to find the compiled app code (depending on whether we're
// running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

let mainWindow: BrowserWindow | null = null;

// Prevent multiple instances
const gotTheLock = app.requestSingleInstanceLock();

if (!gotTheLock) {
  app.quit();
} else {
  app.on('second-instance', () => {
    // Someone tried to run a second instance, focus our window instead.
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore();
      mainWindow.focus();
    }
  });
}

/**
 * Initialize the application
 */
async function initialize() {
  try {
    console.log('🚀 Initializing Random Memo App...');
    
    // Initialize database
    await initializeDatabase();
    console.log('✅ Database initialized');
    
    // Setup IPC handlers
    setupIpcHandlers();
    console.log('✅ IPC handlers setup');
    
    // Setup system integration (hotkeys, tray, etc.)
    await setupSystemIntegration();
    console.log('✅ System integration setup');
    
    console.log('✨ Application initialized successfully');
  } catch (error) {
    console.error('❌ Failed to initialize application:', error);
    app.quit();
  }
}

/**
 * Create the main application window
 */
function createWindow() {
  try {
    mainWindow = createMainWindow();
    
    // Load the appropriate URL
    if (isDev && MAIN_WINDOW_VITE_DEV_SERVER_URL) {
      mainWindow.loadURL(MAIN_WINDOW_VITE_DEV_SERVER_URL);
      // Open DevTools in development
      mainWindow.webContents.openDevTools();
    } else {
      mainWindow.loadFile(
        join(__dirname, `../renderer/${MAIN_WINDOW_VITE_NAME}/index.html`)
      );
    }
    
    // Handle window closed
    mainWindow.on('closed', () => {
      mainWindow = null;
    });
    
    console.log('✅ Main window created');
  } catch (error) {
    console.error('❌ Failed to create main window:', error);
  }
}

// App event handlers
app.whenReady().then(async () => {
  await initialize();
  createWindow();
  
  // On macOS, re-create window when dock icon is clicked
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Quit when all windows are closed, except on macOS
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// Security: Prevent new window creation
app.on('web-contents-created', (_, contents) => {
  contents.on('new-window', (navigationEvent) => {
    navigationEvent.preventDefault();
  });
});

// Handle app quit
app.on('before-quit', () => {
  console.log('🛑 Application shutting down...');
  // Cleanup will be handled by individual modules
});

// Export for access from other modules
export { mainWindow };

// Graceful error handling
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  app.quit();
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  app.quit();
});